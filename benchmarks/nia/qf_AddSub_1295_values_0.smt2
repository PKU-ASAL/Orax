(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-option :produce-models true)
(set-info :source |
Generated by: Yoni Zohar
Generated on: 2019-03-18
Application: verifying compiler optimizations with alive for every bitwidth
Target solver: CVC4, z3
Publications: "Towards Bit-Width-Independent Proofs in SMT Solvers " by A. Niemetz, M. Preiner, A. Reynolds, Y. Zohar, C. Barrett, and C. Tinelli, CADE-27 (2019).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "crafted")
(set-info :status sat)

(declare-cbf _mod  ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-cbf pow2  ((_ BitVec 32)) (_ BitVec 32))
(declare-cbf intand  ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-cbf intor  ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-cbf intxor3 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(declare-cbf in_range  ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-cbf ite_zero ( (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) ) (_ BitVec 32))


(define-fun bitof ((k (_ BitVec 32)) (l (_ BitVec 32)) (a (_ BitVec 32))) (_ BitVec 32) (bvurem (bvudiv a (pow2 l)) (_ bv2 32)))
(define-fun int_all_but_msb ((k (_ BitVec 32)) (a (_ BitVec 32))) (_ BitVec 32) (bvurem a (pow2 (bvsub k (_ bv1 32)))))
(define-fun intmax ((k (_ BitVec 32))) (_ BitVec 32) (bvsub (pow2 k) (_ bv1 32)))
(define-fun intmin ((k (_ BitVec 32))) (_ BitVec 32) (_ bv0 32))
;(define-fun in_range ((k (_ BitVec 32)) (x (_ BitVec 32))) Bool (and (>= x 0) (<= x (intmax k))))

(define-fun intudivtotal ((k (_ BitVec 32)) (a (_ BitVec 32)) (b (_ BitVec 32))) (_ BitVec 32) (ite_zero (bvsub b (_ bv0 32)) (bvsub (pow2 k) (_ bv1 32)) (bvudiv a b) ))
(define-fun intmodtotal ((k (_ BitVec 32)) (a (_ BitVec 32)) (b (_ BitVec 32))) (_ BitVec 32) (ite_zero (bvsub b (_ bv0 32)) a (_mod a b)))
(define-fun intneg ((k (_ BitVec 32)) (a (_ BitVec 32))) (_ BitVec 32) (intmodtotal k (bvsub (pow2 k) a) (pow2 k)))
(define-fun intnot ((k (_ BitVec 32)) (a (_ BitVec 32))) (_ BitVec 32) (bvsub (intmax k) a))
(define-fun intmins ((k (_ BitVec 32))) (_ BitVec 32) (pow2 (bvsub k (_ bv1 32))))
(define-fun intmaxs ((k (_ BitVec 32))) (_ BitVec 32) (intnot k (intmins k)))
(define-fun intadd ((k (_ BitVec 32)) (a (_ BitVec 32)) (b (_ BitVec 32)) ) (_ BitVec 32) (intmodtotal k (bvadd a b) (pow2 k)))
(define-fun intsub ((k (_ BitVec 32)) (a (_ BitVec 32)) (b (_ BitVec 32))) (_ BitVec 32) (intadd k a (intneg k b)))
(define-fun unsigned_to_signed ((k (_ BitVec 32)) (x (_ BitVec 32))) (_ BitVec 32) (bvsub (bvmul (_ bv2 32) (int_all_but_msb k x)) x))
(define-fun intslt ((k (_ BitVec 32)) (a (_ BitVec 32)) (b (_ BitVec 32))) Bool (bvult (unsigned_to_signed k a) (unsigned_to_signed k b)) )
(define-fun intsgt ((k (_ BitVec 32)) (a (_ BitVec 32)) (b (_ BitVec 32))) Bool (bvugt (unsigned_to_signed k a) (unsigned_to_signed k b)) )
(define-fun intsle ((k (_ BitVec 32)) (a (_ BitVec 32)) (b (_ BitVec 32))) Bool (bvule (unsigned_to_signed k a) (unsigned_to_signed k b)) )
(define-fun intsge ((k (_ BitVec 32)) (a (_ BitVec 32)) (b (_ BitVec 32))) Bool (bvuge (unsigned_to_signed k a) (unsigned_to_signed k b)) )
(define-fun pow2_base_cases () Bool (and (= (pow2 (_ bv0 32)) (_ bv1 32)) (= (pow2 (_ bv1 32)) (_ bv2 32)) (= (pow2 (_ bv2 32)) (_ bv4 32)) (= (pow2 (_ bv3 32)) (_ bv8 32)) ) )

;qf axioms
(define-fun pow2_ax () Bool pow2_base_cases)
(define-fun and_ax ((k (_ BitVec 32))) Bool true)
(define-fun or_ax ((k (_ BitVec 32))) Bool true)
(define-fun xor_ax ((k (_ BitVec 32))) Bool true)


(declare-fun k () (_ BitVec 32))
(assert (bvugt k (_ bv0 32)))
(assert pow2_ax)
(assert (and_ax k))
(assert (or_ax k))
(assert (xor_ax k))

(declare-fun %b() (_ BitVec 32))
(assert (= (_ bv1 32) (in_range k %b)))

(declare-fun %a() (_ BitVec 32))
(assert (= (_ bv0 32) (in_range k %a)))

(assert (not (= (intadd k (intand k %a %b) (intxor3 k %a %b)) (intor k %a %b))))
(assert true)
(check-sat)
(get-model)
(exit)
